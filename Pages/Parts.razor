@page "/parts"
@using Stocker.Data
@using StockerDB.Data.Stocker
@using K4os.Compression.LZ4
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<WarehouseConnectionsService>
<h1>Hulgiladude API ühendused</h1>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>Selle lehe nägemiseks pead olema sisse logitud!</p>
    </NotAuthorized>
</AuthorizeView>

@code 
{
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<WarehouseConnections> warehouses = new List<WarehouseConnections>();

    // no need to limit access to this page as of now
    //private string UserIdentityName = "";

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                //UserIdentityName = user.Identity.Name ?? "";
                warehouses = await @Service.GetWarehousesAsync();
            }
        }

    }

    WarehouseConnections objWarehouse = new WarehouseConnections();
    bool ShowPopup = false;
    bool ShowRemovalPopup = false;

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
        ShowRemovalPopup = false;
    }

    void AddWarehouse()
    {
        objWarehouse = new WarehouseConnections();
        objWarehouse.Id = 0;
        ShowPopup = true;
    }

    async Task SaveWarehouse()
    {
        // Close the Popup
        ShowPopup = false;
        // A new forecast will have the Id set to 0
        if (objWarehouse.Id == 0)
        {
            // Create new forecast
            var objNewWarehouse = new WarehouseConnections();
            objNewWarehouse.DisplayName = objWarehouse.DisplayName;
            objNewWarehouse.ConnectionUri = objWarehouse.ConnectionUri;
            objNewWarehouse.LoginName = objWarehouse.LoginName;
            objNewWarehouse.LoginSecret = objWarehouse.LoginSecret;
            objNewWarehouse.LastUpdated = System.DateTime.Now;

            // Save the result
            var result = @Service.CreateWarehouseAsync(objNewWarehouse);
        }
        else
        {
            var result = @Service.UpdateWarehouseAsync(objWarehouse);
        }

        // Get the forecasts for the current user
        warehouses = await @Service.GetWarehousesAsync();
    }

    void EditWarehouse(WarehouseConnections warehouse)
    {
        objWarehouse = warehouse;
        ShowPopup = true;
    }

    void ConfirmRemoval(WarehouseConnections warehouse)
    {
        objWarehouse = warehouse;
        ShowRemovalPopup = true;
    }

    async Task DeleteWarehouse()
    {
        var result = @Service.DeleteWarehouseAsync(objWarehouse);
        warehouses = await @Service.GetWarehousesAsync();
        ShowRemovalPopup = false;
    }
}