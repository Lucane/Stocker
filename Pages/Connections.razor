@page "/connections"

@using Stocker.Data
@using StockerDB.Data.Stocker

@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<WarehouseConnectionsService>

<h1>Hulgiladude API ühendused</h1>

<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        @if (warehouses == null)
        {
            <p><em>Laen andmeid...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Ladu</th>
                        <th>API URL</th>
                        <th>Viimati muudetud</th>
                        <th>
                            <button style="float:right" class="btn btn-success" aria-hidden="true" @onclick="AddWarehouse">
                                <i class="oi oi-plus"></i>
                            </button>
                            @if (ShowPopup)
                            {
                                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h3 class="modal-title">Muuda andmeid</h3>
                                                <button class="btn btn-close" @onclick="ClosePopup">
                                                    <span aria-hidden="true" />
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <input class="form-control" placeholder="Lao nimetus" @bind="objWarehouse.DisplayName"/><br/>
                                                <input class="form-control" type="url" placeholder="API URL" @bind="objWarehouse.ConnectionUri" /><br/>
                                                <input class="form-control" placeholder="Kasutajanimi" @bind="objWarehouse.LoginName" /><br>
                                                <input class="form-control" type="password" placeholder="Parool" @bind="objWarehouse.LoginSecret" /><br/><br />
                                                
                                                <button class="btn btn-success" @onclick="SaveWarehouse"> Salvesta</button>
                                             </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var wh in warehouses)
                    {
                        <tr>
                            <td>@wh.DisplayName</td>
                            <td>@wh.ConnectionUri</td>
                            <td>@wh.LastUpdated</td>
                            <td align="right">
                                <span>
                                    <button class="btn btn-primary" aria-hidden="true" @onclick="(() => EditWarehouse(wh))">
                                        <i class="oi oi-pencil" />
                                    </button>
                                    <button class="btn btn-danger" aria-hidden="true" @onclick="(() => ConfirmRemoval(wh))">
                                        <i class="oi oi-delete"></i>
                                    </button>

                                    @if (ShowRemovalPopup) {
                                        <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h3 class="modal-title">Eemalda väärtus</h3>
                                                    </div>
                                                    <div class="modal-body">
                                                        <table>
                                                            <thead>
                                                                <tr>
                                                                    <th align="left">
                                                                        <button class="btn btn-primary" @onclick="ClosePopup">
                                                                            Tühista
                                                                        </button>
                                                                    </th>
                                                                    <th align="right">
                                                                        <button class="btn btn-danger" @onclick="DeleteWarehouse">
                                                                            Kustuta
                                                                        </button>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                        </table>
                                                     </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>Selle lehe nägemiseks pead olema sisse logitud!</p>
    </NotAuthorized>
</AuthorizeView>

@code 
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<WarehouseConnections> warehouses = new List<WarehouseConnections>();

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                warehouses = await @Service.GetWarehousesAsync();
            }
        }

    }

    WarehouseConnections objWarehouse = new WarehouseConnections();
    bool ShowPopup = false;
    bool ShowRemovalPopup = false;

    void ClosePopup()
    {
        ShowPopup = false;
        ShowRemovalPopup = false;
    }

    void AddWarehouse()
    {
        objWarehouse = new WarehouseConnections();
        objWarehouse.Id = 0;
        ShowPopup = true;
    }

    async Task SaveWarehouse()
    {
        ShowPopup = false;
        if (objWarehouse.Id == 0)
        {
            var objNewWarehouse = new WarehouseConnections();
            objNewWarehouse.DisplayName = objWarehouse.DisplayName;
            objNewWarehouse.ConnectionUri = objWarehouse.ConnectionUri;
            objNewWarehouse.LoginName = objWarehouse.LoginName;
            objNewWarehouse.LoginSecret = objWarehouse.LoginSecret;
            objNewWarehouse.LastUpdated = System.DateTime.Now;

            var result = @Service.CreateWarehouseAsync(objNewWarehouse);
        }
        else
        {
            var result = @Service.UpdateWarehouseAsync(objWarehouse);
        }

        warehouses = await @Service.GetWarehousesAsync();
    }

    void EditWarehouse(WarehouseConnections warehouse)
    {
        objWarehouse = warehouse;
        ShowPopup = true;
    }

    void ConfirmRemoval(WarehouseConnections warehouse)
    {
        objWarehouse = warehouse;
        ShowRemovalPopup = true;
    }

    async Task DeleteWarehouse()
    {
        var result = @Service.DeleteWarehouseAsync(objWarehouse);
        warehouses = await @Service.GetWarehousesAsync();
        ShowRemovalPopup = false;
    }
}