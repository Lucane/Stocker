@page "/notebooks"
@using Stocker.Data
@using StockerDB.Data.Stocker
@using System.Net.Http.Json
@using MudBlazor
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@*@inherits OwningComponentBase<WarehouseConnectionsService>*@
@inherits OwningComponentBase<WarehouseProductsService>

<style>
    .badge {
        background-color: #54CF87;
        color: white;
        padding: 4px 8px;
        text-align: center;
        border-radius: 10px;
    }
</style>

<PageTitle>Sülearvutid</PageTitle>

<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        @*<button style="float:right" class="btn btn-success" aria-hidden="true" @onclick="UpdateData">
            <i class="oi oi-key"></i>
        </button>*@

        @*@if (products == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Laen andmeid...</em></p>
        }
        else {}*@
        <MudBlazor.MudTable Items="products" OnRowClick="ShowBtnPress" T="WarehouseProducts_ALSO"
        Dense=true FixedHeader=true Context="tableContext" Hover=true Elevation="5" Outlined=false
        SortLabel="Sort By" Filter="new Func<WarehouseProducts_ALSO,bool>(FilterFunc)" Height="100%">
            <ColGroup>
                <col />
                <col style="width: auto" />
                <col style="flex-wrap: nowrap" />
                <col style="flex-wrap: nowrap" />
            </ColGroup>

            <ToolBarContent>
                @*<MudText Typo="Typo.h6">Laoseis</MudText>*@
                    
                <MudChipSet MultiSelection="true" Style="display: flex" @bind-SelectedChips="selectedChips">
                    <MudChip Text="ACC" Default=true Variant="Variant.Text" Color="Color.Info" Size="Size.Small">Ladu:ACC</MudChip>
                    <MudChip Text="ALSO" Default=true Variant="Variant.Text" Color="Color.Info" Size="Size.Small">Ladu:ALSO</MudChip>
                    <MudChip Text="F9" Default=true Variant="Variant.Text" Color="Color.Info" Size="Size.Small">Ladu:F9</MudChip>
                    <MudChip Text="InStock" Default=true Variant="Variant.Text" Color="Color.Success" OnClick="FilterChips" Size="Size.Small">Laos</MudChip>
                    <MudChip Text="Incoming" Default=true Variant="Variant.Text" Color="Color.Warning" Disabled=true OnClick="FilterChips" Size="Size.Small">Saabumas</MudChip>
                    <MudChip Text="OutOfStock" Default=false Variant="Variant.Text" Color="Color.Error" OnClick="FilterChips" Size="Size.Small">Laost otsas</MudChip>
                    <MudChip Text="ESD" Default=true Variant="Variant.Text" Color="Color.Primary" OnClick="FilterChips" Size="Size.Small">ESD</MudChip>
                </MudChipSet>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Otsi toodet" Adornment="Adornment.Start" Immediate=true
                            FullWidth=true AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>

            <HeaderContent>
                @*<MudBlazor.MudTh>Part Number</MudBlazor.MudTh>
                <MudBlazor.MudTh>Description</MudBlazor.MudTh>
                <MudBlazor.MudTh>Stock EE</MudBlazor.MudTh>
                <MudBlazor.MudTh>Price EE</MudBlazor.MudTh>*@
                <MudTh Style="background-color: #78A289; color: #ffffff; font-weight: 1000; border-radius: 0px"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WarehouseProducts_ALSO, object>(x=>x.PartNumber)">Tootekood</MudTableSortLabel></MudTh>
                <MudTh Style="background-color: #78A289; color: #ffffff; font-weight: 1000"><MudTableSortLabel SortBy="new Func<WarehouseProducts_ALSO, object>(x=>x.Description)">Kirjeldus</MudTableSortLabel></MudTh>
                <MudTh Style="background-color: #78A289; color: #ffffff; font-weight: 1000"><MudTableSortLabel SortBy="new Func<WarehouseProducts_ALSO, object>(x=>x.Stock_EE)"></MudTableSortLabel></MudTh>
                <MudTh Style="background-color: #78A289; color: #ffffff; font-weight: 1000; border-radius: 0px"><MudTableSortLabel SortBy="new Func<WarehouseProducts_ALSO, object>(x=>x.Price_EE)">Hind</MudTableSortLabel></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudBlazor.MudTd class="cursor-pointer" DataLabel="PartNumber">@tableContext.PartNumber</MudBlazor.MudTd>
                <MudBlazor.MudTd class="cursor-pointer" DataLabel="Description">@tableContext.Description</MudBlazor.MudTd>
                <MudBlazor.MudTd class="cursor-pointer" DataLabel="Stock_EE" Style="vertical-align: central; text-align: center; font-weight: 500">
                    @if (tableContext.CarePack == 1) {
                        <div class="badge">ESD</div>
                    } else if (tableContext.Stock_EE > 0) {
                        <MudTooltip Text="Laos" Arrow=true Placement="Placement.Left" Delay="50" Color="Color.Dark">
                            <MudIcon Icon="@Icons.Material.TwoTone.ShoppingCart" Color="Color.Success" />@*@tableContext.Stock_EE*@
                        </MudTooltip>
                    } else if (tableContext.Stock_EE > 0) {
                        <MudTooltip Text="Saabumas" Arrow=true Placement="Placement.Left" Delay="50" Color="Color.Dark">
                            <MudIcon Icon="@Icons.Material.TwoTone.ShoppingCartCheckout" Color="Color.Warning" />
                        </MudTooltip>
                    } else if (tableContext.Stock_EE == 0) {
                        <MudTooltip Text="Laost otsas" Arrow=true Placement="Placement.Left" Delay="50" Color="Color.Dark">
                            <MudIcon Icon="@Icons.Material.TwoTone.RemoveShoppingCart" Color="Color.Error" />
                        </MudTooltip>
                        
                    }
                    </MudBlazor.MudTd>
                <MudBlazor.MudTd class="cursor-pointer" DataLabel="Price_EE" Style="text-align: right; white-space: nowrap; font-weight: 500">@tableContext.Price_EE €</MudBlazor.MudTd>
            </RowTemplate>
            <ChildRowContent>
		        @if (tableContext.Id == showDetails && tableContext.Stock_FI > 0)
				    {
                    <MudTr>
                    <td colspan="4">
	                <MudCard Square=true Outlined=true Style="background-color: #78A289">
	                    @*<MudCardHeader>
	                    <CardHeaderContent>
	                        <MudText Typo="Typo.body1"><strong>@tableContext.Description</strong></MudText>
	                    </CardHeaderContent>
	                    </MudCardHeader>*@
	                    <MudCardContent>
	                        <MudTable Items="products.Where(x => x.Id == showDetails)" Context="childContext" Hover="true" Elevation="0">
	                            <ColGroup>
                                    <col style="width:200px;" />
		                            <col style="width:200px;" />
		                            <col />
	                            </ColGroup>
	                            <HeaderContent>
                                    <MudTh />
                                    <MudTh>BID Customer</MudTh>
		                            <MudTh>BID Created</MudTh>
	                            </HeaderContent>
	                            <RowTemplate>
                                    <MudTd />
		                            <MudTd DataLabel="Stock_FI">@childContext.Stock_FI</MudTd>
		                            <MudTd DataLabel="Price_FI">@childContext.Price_FI</MudTd>
	                            </RowTemplate>
	                        </MudTable>
	                    </MudCardContent>
	                </MudCard>
                    </td>
                    </MudTr>
		            }
	        </ChildRowContent>
        </MudBlazor.MudTable>
        @*<h4>Hello, @context.User.Identity?.Name!</h4>*@
        @*@if (warehouses == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Laen andmeid...</em></p>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Ladu</th>
                        <th>API URI</th>
                        <th>Viimati muudetud</th>
                        <th>
                            <button style="float:right" class="btn btn-success" aria-hidden="true" @onclick="AddWarehouse">
                                <i class="oi oi-plus"></i>
                            </button>
                            @if (ShowPopup)
                            {
                                <!-- This is the popup to create or edit a forecast -->
                                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h3 class="modal-title">Muuda andmeid</h3>
                                                <!-- Button to close the popup -->
                                                <button class="btn btn-close" @onclick="ClosePopup">
                                                    <span aria-hidden="true" />
                                                </button>
                                            </div>
                                            <!-- Edit form for the current forecast -->
                                            <div class="modal-body">
                                                <input class="form-control" placeholder="Lao nimetus" @bind="objWarehouse.DisplayName"/><br/>
                                                <input class="form-control" type="url" placeholder="API URI" @bind="objWarehouse.ConnectionUri" /><br/>
                                                <input class="form-control" placeholder="Kasutajanimi" @bind="objWarehouse.LoginName" /><br>
                                                <input class="form-control" type="password" placeholder="Parool" @bind="objWarehouse.LoginSecret" /><br/><br />
                                                
                                                <button class="btn btn-success" @onclick="SaveWarehouse"> Salvesta</button>
                                             </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var wh in warehouses)
                    {
                        <tr>
                            <td>@wh.DisplayName</td>
                            <td>@wh.ConnectionUri</td>
                            <td>@wh.LastUpdated</td>
                            <td align="right">
                                <span>
                                    <button class="btn btn-primary" aria-hidden="true" @onclick="(() => EditWarehouse(wh))">
                                        <i class="oi oi-pencil" />
                                    </button>
                                    <button class="btn btn-danger" aria-hidden="true" @onclick="(() => ConfirmRemoval(wh))">
                                        <i class="oi oi-delete"></i>
                                    </button>

                                    @if (ShowRemovalPopup) {
                                        <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h3 class="modal-title">Kustuta väärtus?</h3>
                                                    </div>
                                                    <div class="modal-body">
                                                        <table>
                                                            <thead>
                                                                <tr>
                                                                    <th align="left">
                                                                        <button class="btn btn-primary" @onclick="ClosePopup">
                                                                            Tühista
                                                                        </button>
                                                                    </th>
                                                                    <th align="right">
                                                                        <button class="btn btn-danger" @onclick="DeleteWarehouse">
                                                                            Kustuta
                                                                        </button>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                        </table>
                                                     </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }*@
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>Selle lehe nägemiseks pead olema sisse logitud!</p>
    </NotAuthorized>
</AuthorizeView>

@code 
{
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    //List<WarehouseConnection> warehouses = new List<WarehouseConnection>();
    List<WarehouseProducts_ALSO> products = new List<WarehouseProducts_ALSO>();

    private string searchString = "";
    //MudChip[] selectedChips = new MudChip[chipStockACC, chipStockALSO, chipStockF9, chipInStock];
    private bool inStock = true;
    private bool stockACC = true;
    private bool stockALSO = true;
    private bool stockF9 = true;
    private int showDetails = -1;
    MudChip[] selectedChips;

    // no need to limit access to this page as of now
    //private string UserIdentityName = "";

    protected override async Task OnInitializedAsync()
    {
        //System.Diagnostics.Debug.WriteLine("------------------- Initializing page 'notebooks'");

        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                //UserIdentityName = user.Identity.Name ?? "";
                //products = await @Service.GetAllProductsAsync();
                await FilterChips();
            }
        }

    }

    //WarehouseProductsAlso objProducts = new WarehouseProductsAlso();
    //bool ShowPopup = false;
    //bool ShowRemovalPopup = false;

    //void ClosePopup()
    //{
    //    // Close the Popup
    //    ShowPopup = false;
    //    ShowRemovalPopup = false;
    //}

    //void AddWarehouse()
    //{
    //    objWarehouse = new WarehouseProductsAlso();
    //    objWarehouse.Id = 0;
    //    ShowPopup = true;
    //}

    //async Task SaveWarehouse()
    //{
    //    // Close the Popup
    //    ShowPopup = false;
    //    // A new forecast will have the Id set to 0
    //    if (objWarehouse.Id == 0)
    //    {
    //        // Create new forecast
    //        var objNewWarehouse = new WarehouseConnection();
    //        objNewWarehouse.DisplayName = objWarehouse.DisplayName;
    //        objNewWarehouse.ConnectionUri = objWarehouse.ConnectionUri;
    //        objNewWarehouse.LoginName = objWarehouse.LoginName;
    //        objNewWarehouse.LoginSecret = objWarehouse.LoginSecret;
    //        objNewWarehouse.LastUpdated = System.DateTime.Now;

    //        // Save the result
    //        var result = @Service.CreateWarehouseAsync(objNewWarehouse);
    //    }
    //    else
    //    {
    //        var result = @Service.UpdateWarehouseAsync(objWarehouse);
    //    }

    //    // Get the forecasts for the current user
    //    warehouses = await @Service.GetWarehousesAsync();
    //}

    //void EditWarehouse(WarehouseConnection warehouse)
    //{
    //    objWarehouse = warehouse;
    //    ShowPopup = true;
    //}

    //void ConfirmRemoval(WarehouseConnection warehouse)
    //{
    //    objWarehouse = warehouse;
    //    ShowRemovalPopup = true;
    //}

    //async Task DeleteWarehouse()
    //{
    //    var result = @Service.DeleteWarehouseAsync(objWarehouse);
    //    warehouses = await @Service.GetWarehousesAsync();
    //    ShowRemovalPopup = false;
    //}

    async Task UpdateData()
    {
        var result = await @Service.PopulateDatabaseAsync();
    }

    private bool FilterFunc(WarehouseProducts_ALSO element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.PartNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }

    private async Task FilterChips()
    {

        //foreach (var chip in selectedChips) {
        //foreach (var c in selectedChips) {
        //    System.Diagnostics.Debug.WriteLine(c.Text + " : " + c.IsSelected + products.ElementAt(0).CarePack);
        //}

        //products = await @Service.GetAllProductsAsync();
        products = (await @Service.GetAllProductsAsync()).Where(x => selectedChips.Any(chip => (chip.Text == "InStock" && x.Stock_EE > 0 && x.CarePack == 0)
                                                                                            || (chip.Text == "OutOfStock" && x.Stock_EE == 0 && x.CarePack == 0)
                                                                                            || (chip.Text == "ESD" && x.CarePack == 1)
                                                                                            )).ToList();

        //products = products.Where(x => chip.IsSelected && chip.Text == "OutOfStock" && x.Stock_EE == 0).ToList();
        //}
        //if (inStock) products = products.Where(x => x.Stock_EE > 0).ToList();
    }

    private void ShowBtnPress(TableRowClickEventArgs<WarehouseProducts_ALSO> args)
    {
        if (args == null || args.Item == null) return;
        System.Diagnostics.Debug.WriteLine(args.Item.Id + " : " + showDetails);

        if (args.Item.Id == showDetails) {
            showDetails = -1;
            return;
        }

        showDetails = args.Item.Id;
        //WarehouseProducts_ALSO tmpPerson = products.First(x => x.Id == ID);
        //showDetails = ;
    }
}